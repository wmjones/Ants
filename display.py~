import math
from PIL import Image, ImageDraw

class HexagonGenerator(object):
  """Returns a hexagon generator for hexagons of the specified size."""
  def __init__(self, edge_length):
    self.edge_length = edge_length

#  @property
#  def col_width(self):
#    return self.edge_length * 

#  @property
#  def row_height(self):
#    return self.edge_length *

  def __call__(self, row, col):
#    A = self.edge_length * np.array([[.5, 0],[-math.sqrt(3)/2, 1]])
    
#    b = np.array([row, col])
#    print b
    center_x = math.sqrt(3) * self.edge_length * (col + row * .5)
    center_y = 3 * self.edge_length * row * .5
    print center_x, center_y
    for angle in [30, 90, 150, 210, 270, 330]:
      x = center_x + math.cos(math.radians(angle)) * self.edge_length
      y = center_y + math.sin(math.radians(angle)) * self.edge_length
      yield x
      yield y

def main():
  image = Image.new('RGB', (800, 800), 'white')
  draw = ImageDraw.Draw(image)
  hexagon_generator = HexagonGenerator(20)
  for row in [4,5,6]:
      for col in [4,5,6]:
          hexagon = hexagon_generator(row, col)
          draw.polygon(list(hexagon), outline='black', fill='red')
  
  image.show()

main()
